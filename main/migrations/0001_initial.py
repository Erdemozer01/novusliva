# Generated by Django 5.2.6 on 2025-10-04 14:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('story_title', models.CharField(max_length=200, verbose_name='Story Title')),
                ('story_subtitle', models.CharField(max_length=100, verbose_name='Story Subtitle')),
                ('story_description', models.TextField(verbose_name='Story Description')),
                ('bullet_point_1', models.CharField(max_length=255, verbose_name='Bullet Point 1')),
                ('bullet_point_2', models.CharField(max_length=255, verbose_name='Bullet Point 2')),
                ('bullet_point_3', models.CharField(max_length=255, verbose_name='Bullet Point 3')),
                ('image', models.ImageField(upload_to='about/', verbose_name='About Page Image')),
                ('video_url', models.URLField(blank=True, help_text='YouTube or Vimeo link.', verbose_name='Video Link')),
            ],
            options={
                'verbose_name': 'About Page',
                'verbose_name_plural': 'About Page',
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Bank Name')),
                ('account_holder', models.CharField(max_length=100, verbose_name='Account Holder')),
                ('iban', models.CharField(max_length=34, verbose_name='IBAN')),
                ('swift_code', models.CharField(blank=True, max_length=11, verbose_name='SWIFT Code')),
                ('is_active', models.BooleanField(default=False, help_text='Only one account can be active at a time.', verbose_name='Is Active?')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
            },
        ),
        migrations.CreateModel(
            name='CarouselItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('image', models.ImageField(upload_to='carousel/', verbose_name='Image')),
                ('button_text', models.CharField(default='Read More', max_length=50, verbose_name='Button Text')),
                ('button_url', models.CharField(default='/about', max_length=200, verbose_name='Button URL')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is Active?')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Carousel Item',
                'verbose_name_plural': 'Carousel Items',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('slug', models.SlugField(max_length=120, unique=True)),
            ],
            options={
                'verbose_name': 'Blog Category',
                'verbose_name_plural': 'Blog Categories',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Client Name')),
                ('logo', models.ImageField(upload_to='client_logos/', verbose_name='Client Logo')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Mark as Read')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sent Date')),
            ],
            options={
                'verbose_name': 'Contact Form Message',
                'verbose_name_plural': 'Contact Form Messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiscountCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='E.g: FIRST2025, SUMMERDISCOUNT', max_length=50, unique=True, verbose_name='Discount Code')),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text="Ex: Enter '15.00' for a 15% discount.", max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount Percentage (%)')),
                ('valid_from', models.DateTimeField(verbose_name='Valid From')),
                ('valid_to', models.DateTimeField(verbose_name='Valid To')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active?')),
                ('max_uses', models.PositiveIntegerField(default=0, help_text="Leave '0' for unlimited use.", verbose_name='Maximum Uses')),
                ('used_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Used Count')),
            ],
            options={
                'verbose_name': 'Discount Code',
                'verbose_name_plural': 'Discount Codes',
                'ordering': ['-valid_from'],
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('icon_class', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('slug', models.SlugField(max_length=120, unique=True)),
            ],
            options={
                'verbose_name': 'Portfolio Category',
                'verbose_name_plural': 'Portfolio Categories',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon_class', models.CharField(max_length=100, verbose_name='Icon Class (Bootstrap Icons)')),
                ('color_class', models.CharField(max_length=50, verbose_name='Color Class (e.g: item-cyan)')),
                ('image', models.ImageField(blank=True, null=True, upload_to='service_images/', verbose_name='Service Detail Image')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('twitter_url', models.URLField(blank=True, null=True, verbose_name='Twitter Link')),
                ('facebook_url', models.URLField(blank=True, null=True, verbose_name='Facebook Link')),
                ('instagram_url', models.URLField(blank=True, null=True, verbose_name='Instagram Link')),
                ('linkedin_url', models.URLField(blank=True, null=True, verbose_name='LinkedIn Link')),
            ],
            options={
                'verbose_name': 'Site Setting',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Skill Name (e.g: HTML)')),
                ('percentage', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Percentage Value (1-100)')),
                ('order', models.PositiveIntegerField(default=0, help_text='Used for sorting.')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Subscription Date')),
            ],
            options={
                'verbose_name': 'Newsletter Subscriber',
                'verbose_name_plural': 'Newsletter Subscribers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Tag Name')),
                ('slug', models.SlugField(max_length=120, unique=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('photo', models.ImageField(upload_to='team_photos/', verbose_name='Photo')),
                ('twitter_url', models.URLField(blank=True, verbose_name='Twitter Link')),
                ('facebook_url', models.URLField(blank=True, verbose_name='Facebook Link')),
                ('instagram_url', models.URLField(blank=True, verbose_name='Instagram Link')),
                ('linkedin_url', models.URLField(blank=True, verbose_name='LinkedIn Link')),
                ('order', models.PositiveIntegerField(default=0, help_text='Used for sorting (a smaller number comes first).')),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'ordering': ['order', 'full_name'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('title', models.CharField(max_length=100, verbose_name='Title (e.g: CEO, Designer)')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('photo', models.ImageField(upload_to='testimonials/', verbose_name='Photo')),
                ('rating', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating (1-5)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Customer Testimonial',
                'verbose_name_plural': 'Customer Testimonials',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='Meta Description (for SEO)')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('image', models.ImageField(upload_to='blog_images/', verbose_name='Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10, verbose_name='Status')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to='main.category', verbose_name='Category')),
                ('tags', models.ManyToManyField(blank=True, related_name='blog_posts', to='main.tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('body', models.TextField(verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('active', models.BooleanField(default=False, verbose_name='Active (Approved)')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='main.blogpost', verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('status', models.CharField(choices=[('cart', 'In Cart'), ('pending', 'Payment Pending'), ('pending_iyzico_approval', 'Pending Iyzico Approval'), ('pending_paytr_approval', 'Pending PayTR Approval'), ('completed', 'Completed'), ('payment_failed', 'Payment Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='cart', max_length=30, verbose_name='Status')),
                ('payment_method', models.CharField(blank=True, choices=[('iyzico', 'Iyzico (Credit/Debit Card)'), ('paytr', 'PayTR (Credit/Debit Card)'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash Payment')], max_length=20, null=True, verbose_name='Payment Method')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Payment Date')),
                ('total_paid', models.DecimalField(blank=True, decimal_places=2, help_text='The final amount paid by the customer, confirmed by the payment gateway.', max_digits=12, null=True, verbose_name='Total Amount Paid')),
                ('payment_error_message', models.CharField(blank=True, help_text='Error message returned from the payment gateway on failure.', max_length=255, null=True, verbose_name='Payment Error Message')),
                ('refunded_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Refunded Amount')),
                ('iyzi_conversation_id', models.CharField(blank=True, help_text='ConversationId generated during CF-Initialize', max_length=64, null=True, unique=True)),
                ('iyzi_token_last', models.CharField(blank=True, help_text='Last token that will come to the callback after CF-Initialize (optional)', max_length=64, null=True)),
                ('iyzi_paymentId', models.CharField(blank=True, help_text='Final paymentId returned by CF-Retrieve (unique)', max_length=255, null=True, unique=True)),
                ('iyzi_payment_status', models.CharField(blank=True, help_text='CF-Retrieve paymentStatus: SUCCESS/FAILURE/INIT_THREEDS/...', max_length=32, null=True)),
                ('iyzi_price', models.DecimalField(blank=True, decimal_places=2, help_text="CF-Initialize 'price' (sum of items)", max_digits=12, null=True)),
                ('iyzi_paid_price', models.DecimalField(blank=True, decimal_places=2, help_text="CF-Retrieve 'paidPrice' (final collection including installment commission)", max_digits=12, null=True)),
                ('iyzi_currency', models.CharField(blank=True, default='TRY', help_text='TRY / USD / EUR / GBP (important for international sales)', max_length=3, null=True)),
                ('iyzi_installment', models.PositiveSmallIntegerField(blank=True, help_text='Number of installments (1,2,3,6,9,12)', null=True)),
                ('iyzi_fraud_status', models.SmallIntegerField(blank=True, help_text='CF-Retrieve fraudStatus: -2/-1/0/1/2', null=True)),
                ('iyzi_bin_number', models.CharField(blank=True, help_text='First 6 digits of the card (BIN)', max_length=6, null=True)),
                ('iyzi_card_family', models.CharField(blank=True, help_text='Bonus/Axess/World/Maximum/Paraf/...', max_length=32, null=True)),
                ('iyzi_raw_response', models.JSONField(blank=True, help_text='Final CF-Retrieve (or webhook) JSON response (for debug/reporting)', null=True)),
                ('paytr_merchant_oid', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='PayTR Order ID')),
                ('billing_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Billing Name')),
                ('billing_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Billing Email')),
                ('billing_address', models.TextField(blank=True, null=True, verbose_name='Billing Address')),
                ('billing_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='City')),
                ('billing_postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal Code')),
                ('billing_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Billing Phone Number')),
                ('billing_identity_number', models.CharField(blank=True, max_length=11, null=True, verbose_name='Identity Number')),
                ('currency', models.CharField(choices=[('TRY', 'Turkish Lira'), ('USD', 'US Dollar'), ('EUR', 'Euro'), ('GBP', 'Pound Sterling')], default='TRY', max_length=3, verbose_name='Currency')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='main.discountcode', verbose_name='Discount Code')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Order/Cart',
                'verbose_name_plural': 'Orders/Carts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Project Title')),
                ('short_description', models.CharField(max_length=255, verbose_name='Short Description')),
                ('long_description', models.TextField(verbose_name='Long Description')),
                ('client', models.CharField(blank=True, max_length=200, verbose_name='Client')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='Meta Description')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('project_date', models.DateField(blank=True, null=True, verbose_name='Project Date')),
                ('project_url', models.URLField(blank=True, verbose_name='Project Link')),
                ('main_image', models.ImageField(upload_to='portfolio_images/', verbose_name='Main Image')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Price (TL)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='main.portfoliocategory', verbose_name='Category')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='portfolio_items', to='main.service', verbose_name='Related Service')),
            ],
            options={
                'verbose_name': 'Portfolio Item',
                'verbose_name_plural': 'Portfolio Items',
                'ordering': ['-project_date'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='portfolio_images/details/', verbose_name='Additional Image')),
                ('portfolio_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='main.portfolioitem', verbose_name='Belongs to Project')),
            ],
            options={
                'verbose_name': 'Project Image',
                'verbose_name_plural': 'Project Images',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Price')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.order', verbose_name='Order')),
                ('portfolio_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='main.portfolioitem', verbose_name='Project')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('country', models.CharField(blank=True, max_length=50, verbose_name='Country')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='City')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Address')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postal Code')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
    ]
